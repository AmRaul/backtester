#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞
"""

import json
import pandas as pd
from datetime import datetime

def verify_calculations(results_file):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞
    
    Args:
        results_file: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–û–í –ë–≠–ö–¢–ï–°–¢–ï–†–ê")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open(results_file, 'r', encoding='utf-8') as f:
        results = json.load(f)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    basic_stats = results['basic_stats']
    trade_history = results['trade_history']
    
    print(f"üìä –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${basic_stats.get('current_balance', 0):,.2f}")
    print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trade_history)}")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–¥–µ–ª–∫–∏
    completed_trades = [t for t in trade_history if t['reason'] != 'end_of_data']
    open_trades = [t for t in trade_history if t['reason'] == 'end_of_data']
    
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(completed_trades)}")
    print(f"–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(open_trades)}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if completed_trades:
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–´–• –°–î–ï–õ–û–ö:")
        print("-" * 40)
        
        total_pnl = 0
        winning_trades = 0
        losing_trades = 0
        
        for i, trade in enumerate(completed_trades, 1):
            pnl = trade['pnl']
            total_pnl += pnl
            
            if pnl > 0:
                winning_trades += 1
            else:
                losing_trades += 1
            
            print(f"{i:2d}. {trade['symbol']} | "
                  f"–í—Ö–æ–¥: ${trade['entry_price']:.4f} | "
                  f"–°—Ä–µ–¥–Ω—è—è: ${trade.get('average_price', trade['entry_price']):.4f} | "
                  f"–í—ã—Ö–æ–¥: ${trade['exit_price']:.4f} | "
                  f"PnL: ${pnl:.2f} ({trade['pnl_percent']:.2f}%) | "
                  f"DCA: {trade['dca_orders_count']}")
        
        print()
        print(f"üìà –°–í–û–î–ö–ê –ü–û –ó–ê–í–ï–†–®–ï–ù–ù–´–ú –°–î–ï–õ–ö–ê–ú:")
        print(f"–û–±—â–∏–π PnL: ${total_pnl:.2f}")
        print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades}")
        print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades}")
        print(f"Win Rate: {winning_trades/len(completed_trades)*100:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        initial_balance = 2000  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º
        calculated_balance = initial_balance + total_pnl
        reported_balance = basic_stats.get('current_balance', 0)
        
        print()
        print(f"üí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê:")
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:,.2f}")
        print(f"–û–±—â–∏–π PnL: ${total_pnl:.2f}")
        print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${calculated_balance:,.2f}")
        print(f"–ó–∞—è–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${reported_balance:,.2f}")
        
        if abs(calculated_balance - reported_balance) < 0.01:
            print("‚úÖ –ë–ê–õ–ê–ù–° –†–ê–°–°–ß–ò–¢–ê–ù –ü–†–ê–í–ò–õ–¨–ù–û")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê –í –†–ê–°–ß–ï–¢–ï –ë–ê–õ–ê–ù–°–ê")
            print(f"–†–∞–∑–Ω–∏—Ü–∞: ${calculated_balance - reported_balance:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if open_trades:
        print()
        print("‚ö†Ô∏è  –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –°–î–ï–õ–ö–ò:")
        print("-" * 40)
        
        total_invested = 0
        unrealized_pnl = 0
        
        for i, trade in enumerate(open_trades, 1):
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            avg_price = trade.get('average_price', trade['entry_price'])
            invested = avg_price * trade['quantity']
            total_invested += invested
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL
            current_value = trade['exit_price'] * trade['quantity']
            unrealized = current_value - invested
            unrealized_pnl += unrealized
            
            print(f"{i:2d}. {trade['symbol']} | "
                  f"–í—Ö–æ–¥: ${trade['entry_price']:.4f} | "
                  f"–°—Ä–µ–¥–Ω—è—è: ${avg_price:.4f} | "
                  f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${trade['exit_price']:.4f} | "
                  f"–í–ª–æ–∂–µ–Ω–æ: ${invested:.2f} | "
                  f"–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized:.2f} | "
                  f"DCA: {trade['dca_orders_count']}")
        
        print()
        print(f"üìä –°–í–û–î–ö–ê –ü–û –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ú –°–î–ï–õ–ö–ê–ú:")
        print(f"–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${total_invested:.2f}")
        print(f"–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized_pnl:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if 'actual_balance' in basic_stats:
            actual_balance = basic_stats['actual_balance']
            expected_balance = initial_balance + total_pnl + unrealized_pnl
            
            print()
            print(f"üí∞ –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê:")
            print(f"–ë–∞–ª–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${initial_balance + total_pnl:,.2f}")
            print(f"–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized_pnl:.2f}")
            print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${expected_balance:,.2f}")
            print(f"–ó–∞—è–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${actual_balance:,.2f}")
            
            if abs(expected_balance - actual_balance) < 0.01:
                print("‚úÖ –†–ï–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° –†–ê–°–°–ß–ò–¢–ê–ù –ü–†–ê–í–ò–õ–¨–ù–û")
            else:
                print("‚ùå –û–®–ò–ë–ö–ê –í –†–ê–°–ß–ï–¢–ï –†–ï–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê")
                print(f"–†–∞–∑–Ω–∏—Ü–∞: ${expected_balance - actual_balance:.2f}")
    
    print()
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    import sys
    import os
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python debug_calculations.py <results_file.json>")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python debug_calculations.py results/backtest_results_20250101_120000.json")
        print("  python debug_calculations.py backtest_results_20250101_120000.json")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ results/:")
        if os.path.exists('results'):
            files = [f for f in os.listdir('results') if f.endswith('.json')]
            if files:
                for file in sorted(files, reverse=True)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
                    print(f"  {file}")
            else:
                print("  (–Ω–µ—Ç —Ñ–∞–π–ª–æ–≤)")
        sys.exit(1)
    
    results_file = sys.argv[1]
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ results
    if not os.path.exists(results_file):
        results_file_in_dir = os.path.join('results', results_file)
        if os.path.exists(results_file_in_dir):
            results_file = results_file_in_dir
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {results_file}")
            print(f"‚ùå –¢–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω: {results_file_in_dir}")
            sys.exit(1)
    
    verify_calculations(results_file) 