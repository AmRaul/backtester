import pandas as pd
import numpy as np
from typing import Dict, List, Optional
import json
from datetime import datetime
import time

from data_loader import DataLoader
from strategy import TradingStrategy

class Backtester:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    def __init__(self, config_path: str = None, config_dict: dict = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞
        
        Args:
            config_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON
            config_dict: —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ñ–∞–π–ª—É)
        """
        if config_path:
            with open(config_path, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        elif config_dict:
            self.config = config_dict
        else:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ config_path, –ª–∏–±–æ config_dict")
        
        self.data_loader = DataLoader()
        self.strategy = TradingStrategy(self.config)
        self.results = {}
        self.execution_log = []
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        self.start_date = self.config.get('start_date')
        self.end_date = self.config.get('end_date')
        self.data_source = self.config.get('data_source', {})
        self.symbol = self.config.get('symbol', 'UNKNOWN')
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.total_ticks = 0
        self.processed_ticks = 0
        self.start_time = None
    
    def load_data(self, data_source: dict = None) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            data_source: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            DataFrame —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        source_config = data_source or self.data_source
        source_type = source_config.get('type', 'csv')
        
        data = None
        
        if source_type == 'csv':
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞
            file_path = source_config.get('file')
            if not file_path:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
            
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV: {file_path}...")
            data = self.data_loader.load_from_csv(file_path, self.symbol)
            
        elif source_type == 'api':
            # –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ API (CCXT)
            api_config = source_config.get('api', {})

            exchange = api_config.get('exchange', 'binance')
            api_symbol = api_config.get('symbol', 'BTC/USDT')
            timeframe = self.config.get('timeframe', '1h')
            auto_save = api_config.get('auto_save', False)
            market_type = api_config.get('market_type', 'spot')

            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API —Å –±–∏—Ä–∂–∏ {exchange}...")

            data = self.data_loader.load_from_api(
                symbol=api_symbol,
                timeframe=timeframe,
                start_date=self.start_date,
                end_date=self.end_date,
                exchange=exchange,
                market_type=market_type
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if auto_save:
                saved_file = self.data_loader.save_to_csv()
                print(f"–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {saved_file}")
        
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {source_type}")
        
        if data is None or data.empty:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ (–¥–ª—è CSV –¥–∞–Ω–Ω—ã—Ö)
        if source_type == 'csv' and (self.start_date or self.end_date):
            print(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É: {self.start_date} - {self.end_date}")
            data = self.data_loader.filter_by_date(self.start_date, self.end_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        validation = self.data_loader.validate_data()
        if validation['missing_values']:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {validation['missing_values']}")
        
        if validation['price_anomalies'] > 0:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {validation['price_anomalies']} –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ü–µ–Ω–∞—Ö")
        
        self.total_ticks = len(data)
        print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {self.total_ticks} —Ç–∏–∫–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
        
        return data
    
    def run_backtest(self, data: pd.DataFrame = None, verbose: bool = True) -> dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç
        
        Args:
            data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            verbose: –≤—ã–≤–æ–¥–∏—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        if data is None:
            data = self.load_data()
        
        print(f"\n{'='*50}")
        print(f"–ù–ê–ß–ê–õ–û –ë–≠–ö–¢–ï–°–¢–ê")
        print(f"{'='*50}")
        print(f"–°–∏–º–≤–æ–ª: {self.symbol}")
        print(f"–ü–µ—Ä–∏–æ–¥: {data['timestamp'].min()} - {data['timestamp'].max()}")
        print(f"–í—Å–µ–≥–æ —Ç–∏–∫–æ–≤: {len(data)}")
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.strategy.initial_balance:,.2f}")
        print(f"–¢–∏–ø –æ—Ä–¥–µ—Ä–æ–≤: {self.strategy.order_type.value.upper()}")
        print(f"DCA –≤–∫–ª—é—á–µ–Ω: {'–î–∞' if self.strategy.dca_enabled else '–ù–µ—Ç'}")
        if self.strategy.dca_enabled:
            print(f"  - –ú–∞–∫—Å. DCA –æ—Ä–¥–µ—Ä–æ–≤: {self.strategy.max_dca_orders}")
            print(f"  - –®–∞–≥ DCA: {self.strategy.step_price_value*100:.1f}%")
            print(f"  - –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä: {self.strategy.martingale_multiplier}x")
        print(f"Take Profit: {self.strategy.take_profit_percent*100:.1f}%")
        print(f"Stop Loss: {self.strategy.stop_loss_percent*100:.1f}%")
        print(f"{'='*50}\n")
        
        self.start_time = time.time()
        self.processed_ticks = 0
        
        # –ü–µ—Ä–µ–¥–∞–µ–º verbose —Ñ–ª–∞–≥ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        self.strategy.verbose = verbose
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        lookback_period = max(self.strategy.lookback_period, 20)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
        for i in range(lookback_period, len(data)):
            current_data = data.iloc[i]
            historical_data = data.iloc[:i+1]  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–∫
            actions = self.strategy.process_tick(current_data, historical_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            for action in actions:
                self.execution_log.append(action)
                
                if verbose and action['action'] in ['open_position', 'close_position', 'margin_call']:
                    if action['action'] == 'open_position':
                        print(f"[{current_data['timestamp']}] –í–•–û–î: ${action['price']:.4f} | –ö–æ–ª-–≤–æ: {action['quantity']:.6f}")
                        if self.strategy.leverage > 1:
                            position = self.strategy.get_open_position()
                            if position:
                                liquidation_price = self.strategy.calculate_liquidation_price(position)
                                print(f"   üìä –ü–ª–µ—á–æ: {self.strategy.leverage}x | –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: ${liquidation_price:.4f}")
                    elif action['action'] == 'close_position':
                        trade = action['trade_info']
                        pnl_sign = "+" if trade['pnl'] >= 0 else ""
                        avg_price = trade.get('average_price', trade['entry_price'])
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—á–∏–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                        reason_details = {
                            'take_profit': '‚úÖ Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
                            'stop_loss': 'üõë Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª', 
                            'max_drawdown_reached': 'üõë –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞',
                            'trailing_take_profit': '‚úÖ Trailing Take Profit —Å—Ä–∞–±–æ—Ç–∞–ª',
                            'trailing_stop_loss': 'üõë Trailing Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª',
                            'margin_call': '‚ö†Ô∏è –ú–∞—Ä–∂–∏–Ω –∫–æ–ª–ª'
                        }
                        
                        reason_text = reason_details.get(trade['reason'], f"‚ùì {trade['reason']}")
                        
                        if trade['reason'] == 'max_drawdown_reached':
                            print(f"üõë [{current_data['timestamp']}] –ó–ê–ö–†–´–¢–ò–ï –ü–û –ü–†–û–°–ê–î–ö–ï")
                            print(f"   üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${action['trade_info']['exit_price']:.4f}")
                            print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${avg_price:.4f}")
                            print(f"   üí∏ PnL: {pnl_sign}${trade['pnl']:.2f} ({pnl_sign}{trade['pnl_percent']:.2f}%)")
                            print(f"   üìâ –ü—Ä–∏—á–∏–Ω–∞: {reason_text}")
                            print(f"   üî¢ DCA –æ—Ä–¥–µ—Ä–æ–≤: {trade.get('dca_orders', 'N/A')}")
                        else:
                            print(f"[{current_data['timestamp']}] –í–´–•–û–î: ${action['trade_info']['exit_price']:.4f}")
                            print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.4f}")
                            print(f"   üí∏ PnL: {pnl_sign}${trade['pnl']:.2f} ({pnl_sign}{trade['pnl_percent']:.2f}%)")
                            print(f"   üìã –ü—Ä–∏—á–∏–Ω–∞: {reason_text}")
                            print(f"   üî¢ DCA –æ—Ä–¥–µ—Ä–æ–≤: {trade.get('dca_orders', 'N/A')}")
                    elif action['action'] == 'margin_call':
                        trade = action['trade_info']
                        pnl_sign = "+" if trade['pnl'] >= 0 else ""
                        avg_price = trade.get('average_price', trade['entry_price'])
                        print(f"‚ö†Ô∏è  [{current_data['timestamp']}] –õ–ò–ö–í–ò–î–ê–¶–ò–Ø: ${action['trade_info']['exit_price']:.4f} | "
                              f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.4f} | "
                              f"PnL: {pnl_sign}${trade['pnl']:.2f} ({pnl_sign}{trade['pnl_percent']:.2f}%) | "
                              f"–ü—Ä–∏—á–∏–Ω–∞: {action['reason']}")
                        print(f"   üí• –ü–æ–∑–∏—Ü–∏—è –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –º–∞—Ä–∂–∏!")
            
            self.processed_ticks += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Ç–∏–∫–æ–≤
            if verbose and self.processed_ticks % 1000 == 0:
                progress = (self.processed_ticks / (self.total_ticks - lookback_period)) * 100
                elapsed = time.time() - self.start_time
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | –í—Ä–µ–º—è: {elapsed:.1f}—Å | –ë–∞–ª–∞–Ω—Å: ${self.strategy.balance:.2f}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–µ
        if self.strategy.has_open_position():
            last_price = data.iloc[-1]['close']
            last_timestamp = data.iloc[-1]['timestamp']
            trade_info = self.strategy.close_position(last_price, last_timestamp, "end_of_data")
            
            if verbose:
                avg_price = trade_info.get('average_price', trade_info['entry_price'])
                print(f"[{last_timestamp}] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ ${last_price:.4f}")
                print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.4f}")
                pnl_sign = "+" if trade_info['pnl'] >= 0 else ""
                print(f"PnL: {pnl_sign}${trade_info['pnl']:.2f} ({pnl_sign}{trade_info['pnl_percent']:.2f}%)")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results = self._compile_results(data)
        
        if verbose:
            self._print_results()
        
        return self.results
    
    def _compile_results(self, data: pd.DataFrame) -> dict:
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
        stats = self.strategy.get_statistics()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å "end_of_data" –∏–∑ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        completed_trades = [t for t in self.strategy.trade_history if t['reason'] != 'end_of_data']
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if completed_trades:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            balance_history = self._calculate_balance_history(data)
            max_drawdown = self._calculate_max_drawdown(balance_history)
            
            # Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            returns = pd.Series([t['pnl_percent']/100 for t in completed_trades])
            sharpe_ratio = returns.mean() / returns.std() if returns.std() > 0 else 0
            
            # Profit factor
            gross_profit = sum(t['pnl'] for t in completed_trades if t['pnl'] > 0)
            gross_loss = abs(sum(t['pnl'] for t in completed_trades if t['pnl'] < 0))
            profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
            
            # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
            durations = []
            for trade in completed_trades:
                duration = (trade['exit_time'] - trade['entry_time']).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                durations.append(duration)
            avg_trade_duration = np.mean(durations) if durations else 0
            
        else:
            max_drawdown = 0
            sharpe_ratio = 0
            profit_factor = 0
            avg_trade_duration = 0
            balance_history = []
        
        results = {
            'config': self.config,
            'basic_stats': stats,
            'advanced_metrics': {
                'max_drawdown_percent': max_drawdown,
                'sharpe_ratio': sharpe_ratio,
                'profit_factor': profit_factor,
                'avg_trade_duration_hours': avg_trade_duration,
                'total_fees': 0,  # –ü–æ–∫–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                'max_consecutive_wins': self._get_max_consecutive(True),
                'max_consecutive_losses': self._get_max_consecutive(False)
            },
            'trade_history': self.strategy.trade_history,
            'execution_log': self.execution_log,
            'balance_history': balance_history,
            'data_summary': self.data_loader.get_summary() if self.data_loader.data is not None else {},
            'backtest_info': {
                'start_time': self.start_time,
                'end_time': time.time(),
                'duration_seconds': time.time() - self.start_time if self.start_time else 0,
                'processed_ticks': self.processed_ticks,
                'total_ticks': self.total_ticks
            }
        }
        
        return results
    
    def _calculate_balance_history(self, data: pd.DataFrame) -> List[dict]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        balance_history = []
        current_balance = self.strategy.initial_balance
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        completed_trades = [t for t in self.strategy.trade_history if t['reason'] != 'end_of_data']
        
        for trade in completed_trades:
            balance_history.append({
                'timestamp': trade['exit_time'],
                'balance': current_balance + trade['pnl'],
                'pnl': trade['pnl'],
                'cumulative_pnl': sum(t['pnl'] for t in completed_trades 
                                    if t['exit_time'] <= trade['exit_time'])
            })
            current_balance += trade['pnl']
        
        return balance_history
    
    def _calculate_max_drawdown(self, balance_history: List[dict]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if not balance_history:
            return 0
        
        balances = [self.strategy.initial_balance] + [b['balance'] for b in balance_history]
        
        max_balance = self.strategy.initial_balance
        max_drawdown = 0
        
        for balance in balances:
            if balance > max_balance:
                max_balance = balance
            
            drawdown = (max_balance - balance) / max_balance * 100
            if drawdown > max_drawdown:
                max_drawdown = drawdown
        
        return max_drawdown
    
    def _get_max_consecutive(self, wins: bool) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        completed_trades = [t for t in self.strategy.trade_history if t['reason'] != 'end_of_data']
        
        if not completed_trades:
            return 0
        
        max_consecutive = 0
        current_consecutive = 0
        
        for trade in completed_trades:
            is_win = trade['pnl'] > 0
            
            if (wins and is_win) or (not wins and not is_win):
                current_consecutive += 1
                max_consecutive = max(max_consecutive, current_consecutive)
            else:
                current_consecutive = 0
        
        return max_consecutive
    
    def _print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
        stats = self.results['basic_stats']
        advanced = self.results['advanced_metrics']
        
        print(f"\n{'='*50}")
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê")
        print(f"{'='*50}")
        
        print(f"\nüìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.strategy.initial_balance:,.2f}")
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏): ${stats['current_balance']:,.2f}")
        if 'actual_balance' in stats and stats['actual_balance'] != stats['current_balance']:
            print(f"–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (—Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏): ${stats['actual_balance']:,.2f}")
        print(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_pnl']:,.2f}")
        print(f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['total_return']:.2f}%")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {advanced['max_drawdown_percent']:.2f}%")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}")
        print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['winning_trades']} ({stats['win_rate']:.1f}%)")
        print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['losing_trades']} ({100-stats['win_rate']:.1f}%)")
        print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${stats['average_pnl']:.2f}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['max_profit']:.2f}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${stats['max_loss']:.2f}")
        
        if stats['total_trades'] > 0:
            print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: ${stats['average_profit']:.2f}")
            print(f"–°—Ä–µ–¥–Ω—è—è —É–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞: ${stats['average_loss']:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        if 'open_positions' in stats and stats['open_positions'] > 0:
            print(f"\n‚ö†Ô∏è  –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
            print(f"–ü–æ–∑–∏—Ü–∏–π –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ: {stats['open_positions']}")
            print(f"* –≠—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            open_trades = [t for t in self.strategy.trade_history if t['reason'] == 'end_of_data']
            if open_trades:
                print(f"\nüìã –î–ï–¢–ê–õ–ò –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–• –°–î–ï–õ–û–ö:")
                for i, trade in enumerate(open_trades, 1):
                    avg_price = trade.get('average_price', trade['entry_price'])
                    print(f"{i}. {trade['symbol']} | –í—Ö–æ–¥: ${trade['entry_price']:.4f} | "
                          f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.4f} | "
                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade['quantity']:.6f} | "
                          f"DCA –æ—Ä–¥–µ—Ä–æ–≤: {trade['dca_orders_count']}")
        
        print(f"\nüî¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"Profit Factor: {advanced['profit_factor']:.2f}")
        print(f"Sharpe Ratio: {advanced['sharpe_ratio']:.2f}")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: {advanced['avg_trade_duration_hours']:.1f} —á–∞—Å–æ–≤")
        print(f"–ú–∞–∫—Å. –ø–æ–¥—Ä—è–¥ –ø–æ–±–µ–¥: {advanced['max_consecutive_wins']}")
        print(f"–ú–∞–∫—Å. –ø–æ–¥—Ä—è–¥ –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {advanced['max_consecutive_losses']}")
        
        print(f"\n‚è±Ô∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–°–¢–ï:")
        duration = self.results['backtest_info']['duration_seconds']
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–æ–≤: {self.processed_ticks:,}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {self.processed_ticks/duration:.0f} —Ç–∏–∫–æ–≤/—Å–µ–∫")
        
        
        print(f"\n{'='*50}")
    
    def save_results(self, filename: str = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
        
        Args:
            filename: –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        import os
        os.makedirs('results', exist_ok=True)
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"backtest_results_{timestamp}.json"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é results
        filepath = os.path.join('results', filename)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        results_copy = self._prepare_for_json(self.results.copy())
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(results_copy, f, indent=2, ensure_ascii=False)
        
        return filepath
    
    def _prepare_for_json(self, obj):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON"""
        if isinstance(obj, dict):
            return {key: self._prepare_for_json(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self._prepare_for_json(item) for item in obj]
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif pd.isna(obj):
            return None
        else:
            return obj
    
    def get_trade_summary(self) -> pd.DataFrame:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–¥–µ–ª–∫–∞–º –≤ –≤–∏–¥–µ DataFrame"""
        if not self.strategy.trade_history:
            return pd.DataFrame()
        
        df = pd.DataFrame(self.strategy.trade_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df['duration_hours'] = (df['exit_time'] - df['entry_time']).dt.total_seconds() / 3600
        df['profit_loss'] = df['pnl'].apply(lambda x: 'Profit' if x > 0 else 'Loss')
        
        return df 