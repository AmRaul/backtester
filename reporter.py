import pandas as pd
import numpy as np
from typing import Dict, List, Optional
import json
from datetime import datetime

try:
    import matplotlib.pyplot as plt
    import matplotlib.dates as mdates
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    print("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

class BacktestReporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, results: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
        
        Args:
            results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –∏–∑ –∫–ª–∞—Å—Å–∞ Backtester
        """
        self.results = results
        self.basic_stats = results.get('basic_stats', {})
        self.advanced_metrics = results.get('advanced_metrics', {})
        self.trade_history = results.get('trade_history', [])
        self.balance_history = results.get('balance_history', [])
        self.config = results.get('config', {})
    
    def generate_summary_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç-—Å–≤–æ–¥–∫—É
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º
        """
        report = []
        report.append("=" * 60)
        report.append("–û–¢–ß–ï–¢ –ü–û –ë–≠–ö–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
        report.append("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report.append(f"\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        report.append(f"–°–∏–º–≤–æ–ª: {self.config.get('symbol', 'N/A')}")
        report.append(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {self.config.get('timeframe', 'N/A')}")
        report.append(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.config.get('start_balance', 0):,.2f}")
        report.append(f"–¢–∏–ø –æ—Ä–¥–µ—Ä–æ–≤: {self.config.get('order_type', 'N/A').upper()}")
        
        # DCA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        dca_config = self.config.get('dca', {})
        if dca_config.get('enabled', False):
            report.append(f"\nüîÑ DCA –ù–ê–°–¢–†–û–ô–ö–ò:")
            report.append(f"–ú–∞–∫—Å–∏–º—É–º –æ—Ä–¥–µ—Ä–æ–≤: {dca_config.get('max_orders', 'N/A')}")
            report.append(f"–®–∞–≥ DCA: {dca_config.get('step_percent', 'N/A')}%")
            report.append(f"–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä: {dca_config.get('multiplier', 'N/A')}x")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        report.append(f"\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        report.append(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.basic_stats.get('current_balance', 0):,.2f}")
        report.append(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${self.basic_stats.get('total_pnl', 0):,.2f}")
        report.append(f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {self.basic_stats.get('total_return', 0):.2f}%")
        report.append(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {self.advanced_metrics.get('max_drawdown_percent', 0):.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
        report.append(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
        report.append(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.basic_stats.get('total_trades', 0)}")
        report.append(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.basic_stats.get('winning_trades', 0)} ({self.basic_stats.get('win_rate', 0):.1f}%)")
        report.append(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö: {self.basic_stats.get('losing_trades', 0)}")
        
        if self.basic_stats.get('total_trades', 0) > 0:
            report.append(f"–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: ${self.basic_stats.get('average_pnl', 0):.2f}")
            report.append(f"–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${self.basic_stats.get('max_profit', 0):.2f}")
            report.append(f"–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${self.basic_stats.get('max_loss', 0):.2f}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        report.append(f"\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        report.append(f"Profit Factor: {self.advanced_metrics.get('profit_factor', 0):.2f}")
        report.append(f"Sharpe Ratio: {self.advanced_metrics.get('sharpe_ratio', 0):.2f}")
        report.append(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: {self.advanced_metrics.get('avg_trade_duration_hours', 0):.1f} —á–∞—Å–æ–≤")
        report.append(f"–ú–∞–∫—Å–∏–º—É–º –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥: {self.advanced_metrics.get('max_consecutive_wins', 0)}")
        report.append(f"–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥: {self.advanced_metrics.get('max_consecutive_losses', 0)}")
        
        report.append("\n" + "=" * 60)
        
        return "\n".join(report)
    
    def generate_trades_report(self) -> pd.DataFrame:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º
        
        Returns:
            DataFrame —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–¥–µ–ª–∫–∞—Ö
        """
        if not self.trade_history:
            return pd.DataFrame()
        
        df = pd.DataFrame(self.trade_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df['duration_hours'] = pd.to_datetime(df['exit_time']) - pd.to_datetime(df['entry_time'])
        df['duration_hours'] = df['duration_hours'].dt.total_seconds() / 3600
        
        df['profit_loss'] = df['pnl'].apply(lambda x: 'Profit' if x > 0 else 'Loss')
        df['cumulative_pnl'] = df['pnl'].cumsum()
        df['trade_number'] = range(1, len(df) + 1)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        numeric_columns = ['entry_price', 'exit_price', 'quantity', 'pnl', 'pnl_percent']
        for col in numeric_columns:
            if col in df.columns:
                df[col] = df[col].round(4)
        
        return df
    
    def analyze_performance_by_time(self) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
        """
        if not self.trade_history:
            return {}
        
        df = pd.DataFrame(self.trade_history)
        df['exit_time'] = pd.to_datetime(df['exit_time'])
        df['hour'] = df['exit_time'].dt.hour
        df['day_of_week'] = df['exit_time'].dt.day_name()
        df['month'] = df['exit_time'].dt.month_name()
        
        analysis = {}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
        hourly_stats = df.groupby('hour').agg({
            'pnl': ['count', 'sum', 'mean'],
            'pnl_percent': 'mean'
        }).round(2)
        analysis['hourly'] = hourly_stats.to_dict()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        daily_stats = df.groupby('day_of_week').agg({
            'pnl': ['count', 'sum', 'mean'],
            'pnl_percent': 'mean'
        }).round(2)
        analysis['daily'] = daily_stats.to_dict()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_stats = df.groupby('month').agg({
            'pnl': ['count', 'sum', 'mean'],
            'pnl_percent': 'mean'
        }).round(2)
        analysis['monthly'] = monthly_stats.to_dict()
        
        return analysis
    
    def create_equity_curve_plot(self, save_path: str = None, show: bool = True):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–≤–æ–π —ç–∫–≤–∏—Ç–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞)
        
        Args:
            save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            show: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫
        """
        if not MATPLOTLIB_AVAILABLE:
            print("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        if not self.balance_history:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞.")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamps = [pd.to_datetime(entry['timestamp']) for entry in self.balance_history]
        balances = [entry['balance'] for entry in self.balance_history]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        timestamps.insert(0, timestamps[0])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É
        balances.insert(0, self.config.get('start_balance', 1000))
        
        plt.figure(figsize=(12, 6))
        plt.plot(timestamps, balances, linewidth=2, color='blue', label='–ë–∞–ª–∞–Ω—Å')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        plt.axhline(y=self.config.get('start_balance', 1000), 
                   color='red', linestyle='--', alpha=0.7, label='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å')
        
        plt.title('–ö—Ä–∏–≤–∞—è —ç–∫–≤–∏—Ç–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)', fontsize=14, fontweight='bold')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ë–∞–ª–∞–Ω—Å ($)')
        plt.grid(True, alpha=0.3)
        plt.legend()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–∏
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(timestamps)//10)))
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        
        if show:
            plt.show()
    
    def create_pnl_distribution_plot(self, save_path: str = None, show: bool = True):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤
        
        Args:
            save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            show: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫
        """
        if not MATPLOTLIB_AVAILABLE:
            print("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        if not self.trade_history:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        
        pnl_values = [trade['pnl'] for trade in self.trade_history]
        
        plt.figure(figsize=(10, 6))
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        plt.hist(pnl_values, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        plt.axvline(x=0, color='red', linestyle='-', alpha=0.8, label='–ë–µ–∑—É–±—ã—Ç–æ–∫')
        plt.axvline(x=np.mean(pnl_values), color='green', linestyle='--', 
                   alpha=0.8, label=f'–°—Ä–µ–¥–Ω–µ–µ: ${np.mean(pnl_values):.2f}')
        
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤', fontsize=14, fontweight='bold')
        plt.xlabel('–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫ ($)')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        plt.grid(True, alpha=0.3)
        plt.legend()
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        
        if show:
            plt.show()
    
    def create_drawdown_plot(self, save_path: str = None, show: bool = True):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–∫–∏
        
        Args:
            save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            show: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫
        """
        if not MATPLOTLIB_AVAILABLE:
            print("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        if not self.balance_history:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏.")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
        balances = [self.config.get('start_balance', 1000)] + [entry['balance'] for entry in self.balance_history]
        timestamps = [pd.to_datetime(self.balance_history[0]['timestamp'])] + \
                    [pd.to_datetime(entry['timestamp']) for entry in self.balance_history]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
        max_balance = []
        current_max = balances[0]
        
        for balance in balances:
            if balance > current_max:
                current_max = balance
            max_balance.append(current_max)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        drawdown = [(max_bal - bal) / max_bal * 100 for max_bal, bal in zip(max_balance, balances)]
        
        plt.figure(figsize=(12, 6))
        plt.fill_between(timestamps, drawdown, 0, alpha=0.3, color='red', label='–ü—Ä–æ—Å–∞–¥–∫–∞')
        plt.plot(timestamps, drawdown, color='red', linewidth=1)
        
        plt.title('–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è', fontsize=14, fontweight='bold')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ü—Ä–æ—Å–∞–¥–∫–∞ (%)')
        plt.grid(True, alpha=0.3)
        plt.legend()
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—å Y –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        plt.gca().invert_yaxis()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–∏
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(timestamps)//10)))
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        
        if show:
            plt.show()
    
    def create_monthly_returns_plot(self, save_path: str = None, show: bool = True):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –º–µ—Å—è—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        
        Args:
            save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            show: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫
        """
        if not MATPLOTLIB_AVAILABLE:
            print("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        if not self.trade_history:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        
        df = pd.DataFrame(self.trade_history)
        df['exit_time'] = pd.to_datetime(df['exit_time'])
        df['year_month'] = df['exit_time'].dt.to_period('M')
        
        monthly_pnl = df.groupby('year_month')['pnl'].sum()
        
        plt.figure(figsize=(12, 6))
        colors = ['green' if x >= 0 else 'red' for x in monthly_pnl.values]
        bars = plt.bar(range(len(monthly_pnl)), monthly_pnl.values, color=colors, alpha=0.7)
        
        plt.title('–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=14, fontweight='bold')
        plt.xlabel('–ú–µ—Å—è—Ü')
        plt.ylabel('–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫ ($)')
        plt.grid(True, alpha=0.3, axis='y')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏ X
        plt.xticks(range(len(monthly_pnl)), 
                  [str(period) for period in monthly_pnl.index], 
                  rotation=45)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, bar in enumerate(bars):
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                    f'${height:.0f}',
                    ha='center', va='bottom' if height >= 0 else 'top')
        
        plt.axhline(y=0, color='black', linestyle='-', alpha=0.5)
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        
        if show:
            plt.show()
    
    def generate_full_report(self, output_dir: str = "results"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        
        Args:
            output_dir: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        """
        import os
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(output_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        summary = self.generate_summary_report()
        with open(f"{output_dir}/summary_report_{timestamp}.txt", 'w', encoding='utf-8') as f:
            f.write(summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º
        trades_df = self.generate_trades_report()
        if not trades_df.empty:
            trades_df.to_csv(f"{output_dir}/trades_report_{timestamp}.csv", index=False)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ matplotlib –¥–æ—Å—Ç—É–ø–µ–Ω
        if MATPLOTLIB_AVAILABLE:
            self.create_equity_curve_plot(
                save_path=f"{output_dir}/equity_curve_{timestamp}.png", 
                show=False
            )
            self.create_pnl_distribution_plot(
                save_path=f"{output_dir}/pnl_distribution_{timestamp}.png", 
                show=False
            )
            self.create_drawdown_plot(
                save_path=f"{output_dir}/drawdown_{timestamp}.png", 
                show=False
            )
            self.create_monthly_returns_plot(
                save_path=f"{output_dir}/monthly_returns_{timestamp}.png", 
                show=False
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        with open(f"{output_dir}/full_results_{timestamp}.json", 'w', encoding='utf-8') as f:
            json.dump(self._prepare_for_json(self.results), f, indent=2, ensure_ascii=False)
        
        print(f"\n–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {output_dir}")
        print(f"–§–∞–π–ª—ã:")
        print(f"  - summary_report_{timestamp}.txt")
        print(f"  - trades_report_{timestamp}.csv")
        print(f"  - full_results_{timestamp}.json")
        if MATPLOTLIB_AVAILABLE:
            print(f"  - equity_curve_{timestamp}.png")
            print(f"  - pnl_distribution_{timestamp}.png")
            print(f"  - drawdown_{timestamp}.png")
            print(f"  - monthly_returns_{timestamp}.png")
    
    def _prepare_for_json(self, obj):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON"""
        if isinstance(obj, dict):
            return {key: self._prepare_for_json(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self._prepare_for_json(item) for item in obj]
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif pd.isna(obj):
            return None
        else:
            return obj
    
    def print_top_trades(self, n: int = 10):
        """
        –í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö —Å–¥–µ–ª–æ–∫
        
        Args:
            n: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞
        """
        if not self.trade_history:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö.")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å "end_of_data" –∏–∑ —Ç–æ–ø —Å–¥–µ–ª–æ–∫
        completed_trades = [t for t in self.trade_history if t['reason'] != 'end_of_data']
        
        if not completed_trades:
            print("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        df = pd.DataFrame(completed_trades)
        
        print(f"\nüèÜ –¢–û–ü {n} –õ–£–ß–®–ò–• –°–î–ï–õ–û–ö:")
        print("-" * 60)
        best_trades = df.nlargest(n, 'pnl')
        for i, (_, trade) in enumerate(best_trades.iterrows(), 1):
            exit_time_str = str(trade['exit_time'])[:19] if hasattr(trade['exit_time'], '__getitem__') else str(trade['exit_time'])
            print(f"{i:2d}. {exit_time_str} | "
                  f"${trade['pnl']:8.2f} ({trade['pnl_percent']:6.2f}%) | "
                  f"{trade['entry_price']:.4f} ‚Üí {trade['exit_price']:.4f}")
        
        print(f"\nüí• –¢–û–ü {n} –•–£–î–®–ò–• –°–î–ï–õ–û–ö:")
        print("-" * 60)
        worst_trades = df.nsmallest(n, 'pnl')
        for i, (_, trade) in enumerate(worst_trades.iterrows(), 1):
            exit_time_str = str(trade['exit_time'])[:19] if hasattr(trade['exit_time'], '__getitem__') else str(trade['exit_time'])
            print(f"{i:2d}. {exit_time_str} | "
                  f"${trade['pnl']:8.2f} ({trade['pnl_percent']:6.2f}%) | "
                  f"{trade['entry_price']:.4f} ‚Üí {trade['exit_price']:.4f}")
    
    def get_risk_metrics(self) -> Dict:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ä–∏—Å–∫–∞
        """
        if not self.trade_history:
            return {}
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å "end_of_data" –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞
        completed_trades = [t for t in self.trade_history if t['reason'] != 'end_of_data']
        
        if not completed_trades:
            return {}
        
        df = pd.DataFrame(completed_trades)
        returns = df['pnl_percent'] / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–∏
        
        risk_metrics = {
            'volatility': returns.std() * np.sqrt(252),  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            'var_95': np.percentile(returns, 5),  # VaR 95%
            'var_99': np.percentile(returns, 1),  # VaR 99%
            'skewness': returns.skew(),  # –ê—Å–∏–º–º–µ—Ç—Ä–∏—è
            'kurtosis': returns.kurtosis(),  # –≠–∫—Å—Ü–µ—Å—Å
            'calmar_ratio': self.basic_stats.get('total_return', 0) / max(self.advanced_metrics.get('max_drawdown_percent', 1), 1),
            'recovery_factor': abs(self.basic_stats.get('total_pnl', 0)) / max(abs(self.basic_stats.get('max_loss', 1)), 1)
        }
        
        return risk_metrics 